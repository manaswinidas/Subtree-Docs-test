Kogito takes advantage of BPMN2 as language to model your business logic as workflow. It originates from jBPM
and by that brings in execution capabilities of the process engine. Although since it has number of additional
requirements not all BPMN2 constructs are supported at the moment. They are being added gradually with every release of Kogito

= Supported BPMN2 constructs for process design

== Start events

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|None
|None start event allows to explicitly instantiate new process instance without any triggers
|0.1.0

|Message
|Message start event allows to instantiate new process instance based on incoming message, message data input is required
|0.2.0
|===

== End events

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|None
|None end event causes current branch of the process to finish not finishing any other branch that is active, completes process instance when it is the only active branch of the process instance
|0.1.0

|Terminate
|Terminate end event makes complete process instance to complete
|0.1.0

|Error
|Error end event makes complete process instance to complete with associated error
|0.1.0

|Message
|Message end event allows to send a message upon completion of the process instance or given path, message data output is required
|0.2.0
|===

== Tasks

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|Script
|Script task allows to execute arbitrary java code as part of the process execution
|0.1.0

|User
|User task allows to assign given work to human actors
|0.1.0

|Service
|Service task allows to invoke service operations - a method from a class
|0.1.0

|Business rule
|Business rule task allows to invoke business rules evaluation - DRL
|0.1.0

|Work item
|Work item task allows to invoke tailored handler class to perform the logic behind given task
|0.1.0

|Call activity (Reusable subprocess)
|Call activity task allows to create sub process instance from within process
|0.1.0
|===

== Gateways

NOTE: Syntax for conditions is limited to java expressions

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|Exclusive (XOR)
|Exclusive gateway allows to find only one path to follow based on condition
|0.1.0

|Inclusive (OR)
|Inclusive gateway allows to find one or more paths to follow based on condition
|0.1.0

|Parallel (AND)
|Parallel gateway allows to all defined paths without any condition check
|0.1.0
|===

== Intermediate events

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|Signal
|Signal event allows to pause process instance and wait for given signal to arrive with optional data
|0.2.0
|===

== Boundary events

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|Signal
|Signal event allows to attach extra path to activity and wait for given signal to arrive with optional data
|0.2.0
|===

== Multi instance characteristic 

[cols="20%,60%,20%"]
|===
|Type |Description |Since version 

|Call activity
|Multi instance characteristic applied on call activity that allows to create new instance of the reusable subprocess for each item of the collection
|0.2.0

|Service task
|Multi instance characteristic applied on service task that allows to create new instance of the service invocation for each item of the collection
|0.2.0

|User task
|Multi instance characteristic applied on user task that allows to assign user task for each item of the collection
|0.2.0
|===